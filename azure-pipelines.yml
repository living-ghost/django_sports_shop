# Python to Linux Web App on Azure
trigger:
- master

variables:
  azureServiceConnectionId: 'ac9fac07-bd8f-4649-acd8-1aa7087bd04f'
  webAppName: 'django-fruits-app-project'
  vmImageName: 'ubuntu-latest'
  environmentName: 'django-fruits-app-project'
  projectRoot: $(System.DefaultWorkingDirectory)/sports_shop_proj  # Updated to point to Django root
  pythonVersion: '3.11'
  
  # Environment variables (secret values should be set in pipeline variables)
  SECRET_KEY: $(SECRET_KEY)
  ALLOWED_HOSTS: 'https://django-fruits-app-project-c7a5hbb3fqfef6fx.canadacentral-01.azurewebsites.net/'
  DEBUG: 'True'
  EMAIL_HOST: 'smtp.gmail.com'
  EMAIL_PORT: '587'
  EMAIL_HOST_USER: $(EMAIL_HOST_USER)
  EMAIL_HOST_PASSWORD: $(EMAIL_HOST_PASSWORD)

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        python -m venv antenv
        source antenv/bin/activate
        
        # Install requirements including staticfiles support
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install gunicorn django.contrib.staticfiles
        
        # Verify staticfiles is installed
        python -c "import django.contrib.staticfiles; print('Staticfiles installed')"
        
        # Only run collectstatic if staticfiles is configured
        if [ -f "$(projectRoot)/sports_shop_proj/settings.py" ]; then
          if grep -q "STATIC_ROOT" "$(projectRoot)/sports_shop_proj/settings.py"; then
            python manage.py collectstatic --noinput
          else
            echo "STATIC_ROOT not configured in settings.py, skipping collectstatic"
          fi
        fi
        
        # Run migrations
        python manage.py migrate --noinput
      workingDirectory: $(projectRoot)
      displayName: "Install and prepare Django"
      env:
        SECRET_KEY: $(SECRET_KEY)
        ALLOWED_HOSTS: $(ALLOWED_HOSTS)
        DEBUG: $(DEBUG)
        EMAIL_HOST: $(EMAIL_HOST)
        EMAIL_PORT: $(EMAIL_PORT)
        EMAIL_HOST_USER: $(EMAIL_HOST_USER)
        EMAIL_HOST_PASSWORD: $(EMAIL_HOST_PASSWORD)

    - script: |
        source antenv/bin/activate
        python manage.py check --deploy
        python manage.py migrate --noinput
      workingDirectory: $(projectRoot)
      displayName: "Verify and run migrations"
      env:
        SECRET_KEY: $(SECRET_KEY)
        ALLOWED_HOSTS: $(ALLOWED_HOSTS)
        DEBUG: $(DEBUG)
        EMAIL_HOST: $(EMAIL_HOST)
        EMAIL_PORT: $(EMAIL_PORT)
        EMAIL_HOST_USER: $(EMAIL_HOST_USER)
        EMAIL_HOST_PASSWORD: $(EMAIL_HOST_PASSWORD)

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              runtimeStack: 'PYTHON|3.11'
              startupCommand: 'gunicorn --bind 0.0.0.0:8000 sports_shop_proj.wsgi'
              appSettings: |
                [
                  {"name": "SECRET_KEY", "value": "$(SECRET_KEY)"},
                  {"name": "ALLOWED_HOSTS", "value": "$(ALLOWED_HOSTS)"},
                  {"name": "DEBUG", "value": "$(DEBUG)"},
                  {"name": "EMAIL_HOST", "value": "$(EMAIL_HOST)"},
                  {"name": "EMAIL_PORT", "value": "$(EMAIL_PORT)"},
                  {"name": "EMAIL_HOST_USER", "value": "$(EMAIL_HOST_USER)"},
                  {"name": "EMAIL_HOST_PASSWORD", "value": "$(EMAIL_HOST_PASSWORD)"}
                ]